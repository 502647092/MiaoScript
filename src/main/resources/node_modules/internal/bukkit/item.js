'use strict';
/**
 * 物品快速生成类
 * Created by 蒋天蓓 on 2017/2/9 0009.
 */
/*global Java, base, module, exports, require, __FILE__*/
var Bukkit = MServer;
var item = {};
var ItemStack = Java.type("org.bukkit.inventory.ItemStack");
var Material = Java.type('org.bukkit.Material');
var ItemIDMaterial = require('./item-id-material.json')
var ItemIDRegex = /^[0-9]*$/

/**
 * 创建一个物品
 * @constructor (ID)
 * @constructor (ID,数量)
 * @constructor (ID,数量,子ID)
 */
item.create = function() {
    var idOrType = item.type(arguments[0]);
    if (!idOrType) {
        throw Error('无效的物品ID或枚举 ' + arguments[0] + ' => ' + idOrType)
    }
    switch (arguments.length) {
        case 1:
            return new ItemStack(idOrType);
        case 2:
            return new ItemStack(idOrType, arguments[1]);
        case 3:
            return new ItemStack(idOrType, arguments[1], arguments[2]);
    }
};

/**
 * 获得物品枚举(兼容的方式)
 */
item.type = function(idOrType) {
    if (arguments.length > 1) {
        idOrType = Array.prototype.slice.apply(arguments);
    }
    var argType = toString.call(idOrType)
    switch (argType) {
        case "[object Number]":
            if (Material['LEGACY_PREFIX']) {
                idOrType = Material[Material['LEGACY_PREFIX'] + ItemIDMaterial[idOrType]];
            }
            break;
        case "[object String]":
            if (ItemIDRegex.test(idOrType)) {
                idOrType = ItemIDMaterial[idOrType];
            }
            // 尝试获取老版本枚举
            idOrType = Material[idOrType] || Material[Material['LEGACY_PREFIX'] + idOrType];
            break;
        case "[object Array]":
            idOrType.some(function(type) {
                var temp = item.type(type);
                if (temp) {
                    idOrType = temp;
                    return true;
                }
            });
        case "[object Undefined]":
        case "[object Null]":
            return idOrType;
        default:
            throw Error("Unsupport argument type " + argType + " value " + idOrType)
    }
    return idOrType;
};

/**
 * 创建一个头颅
 * @constructor (玩家名称)
 */
item.head = function(name) {
    var head = item.create(397, 1, 3);
    var skullMeta = head.itemMeta;
    skullMeta.setOwner(name);
    head.setItemMeta(skullMeta);
    return head;
};

/**
 * 给玩家添加物品
 * @param player 玩家
 * @param items 物品数组
 * @param drop 满背包是否掉落
 */
item.add = function(player, items, drop) {
    var drops = player.inventory.addItem(items).values();
    if (drops.size() !== 0 && drop) {
        drops.forEach(function(itemStack) {
            item.drop(player.location, itemStack);
        });
    }
};

/**
 * 指定地点掉落物品
 * @param loc 地点
 * @param item 物品
 */
item.drop = function(loc, item) {
    setTimeout(function() {
        loc.world.dropItem(loc, item);
    }, 1);
};

/**
 * 设置物品名称
 * @param item 物品
 * @param name
 * @returns {*}
 */
item.setName = function(item, name) {
    if (item.type && item.type.name() !== "AIR") {
        var meta = item.meta(item);
        meta.setDisplayName(name);
        item.setItemMeta(meta);
    }
    return item;
};

/**
 * 设置物品Lore
 * @param item 物品
 * @param lores Lore
 * @returns {*} 物品
 */
item.setLore = item.setLores = function(item, lores) {
    var argType = toString.call(lores);
    switch (argType) {
        case "[object String]":
            lores = lores.split("\n");
            break;
        case "[object Array]":
            var temp = [];
            lores.forEach(function(lore) {
                temp.push(lore.split("\n"))
            });
            lores = temp;
        default:
            throw Error("Unsupport argument type " + argType + " value " + lores)
    }
    if (item.type && item.type.name() !== "AIR") {
        var meta = item.meta(item);
        meta.setLore(lores);
        item.setItemMeta(meta);
    }
    return item;
};

item.meta = function(item) {
    return item.hasItemMeta() ? item.itemMeta : Bukkit.itemFactory.getItemMeta(item.type);
}

module.exports = item;